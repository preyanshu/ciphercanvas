{
  "address": "Hk2AAbbrrjJFH4Wkm3DsudgGSWp2ftgL97dzfgxUkkzq",
  "metadata": {
    "name": "proposal_system",
    "version": "0.1.0",
    "spec": "0.1.0",
    "description": "Created with Arcium & Anchor"
  },
  "instructions": [
    {
      "name": "claim_reward",
      "docs": [
        "Claims reward for either:",
        "1. The submitter of the winning proposal (receives 50% of escrow)",
        "2. A voter who voted for the winning proposal (receives equal share of remaining 50%)",
        "This function can be called for any completed round, not just the current one.",
        "",
        "# Arguments",
        "* `round_id` - The round ID to claim rewards for"
      ],
      "discriminator": [
        149,
        95,
        181,
        242,
        94,
        90,
        158,
        162
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "system_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  115,
                  121,
                  115,
                  116,
                  101,
                  109
                ]
              }
            ]
          }
        },
        {
          "name": "round_history",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  118,
                  111,
                  116,
                  105,
                  110,
                  103,
                  95,
                  114,
                  111,
                  117,
                  110,
                  100,
                  95,
                  104,
                  105,
                  115,
                  116,
                  111,
                  114,
                  121
                ]
              },
              {
                "kind": "account",
                "path": "system_acc"
              },
              {
                "kind": "arg",
                "path": "round_id"
              }
            ]
          }
        },
        {
          "name": "round_escrow",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  111,
                  117,
                  110,
                  100,
                  95,
                  101,
                  115,
                  99,
                  114,
                  111,
                  119
                ]
              },
              {
                "kind": "arg",
                "path": "round_id"
              }
            ]
          }
        },
        {
          "name": "vote_receipt",
          "writable": true
        },
        {
          "name": "winning_proposal"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "round_id",
          "type": "u64"
        }
      ]
    },
    {
      "name": "create_round_history",
      "docs": [
        "Creates a voting round history account after a winner has been revealed.",
        "This is called separately from the reveal callback to avoid MXE complexity.",
        "All data is read from the system state to prevent tampering.",
        "",
        "# Arguments",
        "* `theme` - Theme for the new round"
      ],
      "discriminator": [
        197,
        147,
        255,
        30,
        242,
        15,
        182,
        236
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "system_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  115,
                  121,
                  115,
                  116,
                  101,
                  109
                ]
              }
            ]
          }
        },
        {
          "name": "round_metadata",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  111,
                  117,
                  110,
                  100,
                  95,
                  109,
                  101,
                  116,
                  97,
                  100,
                  97,
                  116,
                  97
                ]
              }
            ]
          }
        },
        {
          "name": "round_history",
          "writable": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "theme",
          "type": "string"
        }
      ]
    },
    {
      "name": "decrypt_vote",
      "docs": [
        "Decrypts an encrypted vote to reveal the plaintext proposal ID.",
        "",
        "This function allows the system authority to decrypt individual votes",
        "for auditing purposes or verification. The vote must have been previously",
        "encrypted using the same encryption scheme as the voting system.",
        "",
        "# Arguments",
        "* `vote` - The encrypted vote containing the proposal ID",
        "* `vote_encryption_pubkey` - The public key used to encrypt the vote",
        "* `vote_nonce` - The nonce used for vote encryption"
      ],
      "discriminator": [
        212,
        231,
        98,
        43,
        240,
        131,
        125,
        104
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "sign_pda_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  83,
                  105,
                  103,
                  110,
                  101,
                  114,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "mxe_account"
        },
        {
          "name": "mempool_account",
          "writable": true
        },
        {
          "name": "executing_pool",
          "writable": true
        },
        {
          "name": "computation_account",
          "writable": true
        },
        {
          "name": "comp_def_account"
        },
        {
          "name": "cluster_account",
          "writable": true
        },
        {
          "name": "pool_account",
          "writable": true,
          "address": "7MGSS4iKNM4sVib7bDZDJhVqB6EcchPwVnTKenCY1jt3"
        },
        {
          "name": "clock_account",
          "address": "FHriyvoZotYiFnbUzKFjzRSb2NiaC8RPWY7jtKuKhg65"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "system_acc",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  115,
                  121,
                  115,
                  116,
                  101,
                  109
                ]
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "computation_offset",
          "type": "u64"
        },
        {
          "name": "vote",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "vote_encryption_pubkey",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "vote_nonce",
          "type": "u128"
        }
      ]
    },
    {
      "name": "decrypt_vote_callback",
      "discriminator": [
        113,
        0,
        44,
        170,
        13,
        132,
        126,
        173
      ],
      "accounts": [
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "comp_def_account"
        },
        {
          "name": "instructions_sysvar",
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "system_acc",
          "writable": true
        }
      ],
      "args": [
        {
          "name": "output",
          "type": {
            "defined": {
              "name": "ComputationOutputs",
              "generics": [
                {
                  "kind": "type",
                  "type": {
                    "defined": {
                      "name": "DecryptVoteOutput"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "init_decrypt_vote_comp_def",
      "discriminator": [
        76,
        125,
        201,
        75,
        117,
        251,
        244,
        190
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "mxe_account",
          "writable": true
        },
        {
          "name": "comp_def_account",
          "docs": [
            "Can't check it here as it's not initialized yet."
          ],
          "writable": true
        },
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": []
    },
    {
      "name": "init_proposal_system",
      "docs": [
        "Creates a new proposal submission and voting system.",
        "",
        "This initializes the system with encrypted vote counters for all proposals.",
        "The vote tallies are stored in encrypted form and can only be revealed by the system authority.",
        "All individual votes remain completely confidential throughout the voting process.",
        "",
        "# Arguments",
        "* `nonce` - Cryptographic nonce for initializing encrypted vote counters"
      ],
      "discriminator": [
        29,
        137,
        173,
        192,
        254,
        94,
        144,
        211
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "sign_pda_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  83,
                  105,
                  103,
                  110,
                  101,
                  114,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "mxe_account"
        },
        {
          "name": "mempool_account",
          "writable": true
        },
        {
          "name": "executing_pool",
          "writable": true
        },
        {
          "name": "computation_account",
          "writable": true
        },
        {
          "name": "comp_def_account"
        },
        {
          "name": "cluster_account",
          "writable": true
        },
        {
          "name": "pool_account",
          "writable": true,
          "address": "7MGSS4iKNM4sVib7bDZDJhVqB6EcchPwVnTKenCY1jt3"
        },
        {
          "name": "clock_account",
          "address": "FHriyvoZotYiFnbUzKFjzRSb2NiaC8RPWY7jtKuKhg65"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "system_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  115,
                  121,
                  115,
                  116,
                  101,
                  109
                ]
              }
            ]
          }
        },
        {
          "name": "round_metadata",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  111,
                  117,
                  110,
                  100,
                  95,
                  109,
                  101,
                  116,
                  97,
                  100,
                  97,
                  116,
                  97
                ]
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "computation_offset",
          "type": "u64"
        },
        {
          "name": "nonce",
          "type": "u128"
        }
      ]
    },
    {
      "name": "init_proposal_votes_callback",
      "discriminator": [
        41,
        203,
        159,
        109,
        44,
        138,
        44,
        200
      ],
      "accounts": [
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "comp_def_account"
        },
        {
          "name": "instructions_sysvar",
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "system_acc",
          "writable": true
        }
      ],
      "args": [
        {
          "name": "output",
          "type": {
            "defined": {
              "name": "ComputationOutputs",
              "generics": [
                {
                  "kind": "type",
                  "type": {
                    "defined": {
                      "name": "InitProposalVotesOutput"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "init_proposal_votes_comp_def",
      "discriminator": [
        157,
        100,
        252,
        169,
        155,
        151,
        147,
        245
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "mxe_account",
          "writable": true
        },
        {
          "name": "comp_def_account",
          "docs": [
            "Can't check it here as it's not initialized yet."
          ],
          "writable": true
        },
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": []
    },
    {
      "name": "init_reveal_winner_comp_def",
      "discriminator": [
        173,
        137,
        227,
        198,
        42,
        224,
        111,
        35
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "mxe_account",
          "writable": true
        },
        {
          "name": "comp_def_account",
          "docs": [
            "Can't check it here as it's not initialized yet."
          ],
          "writable": true
        },
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": []
    },
    {
      "name": "init_verify_winning_vote_comp_def",
      "discriminator": [
        179,
        123,
        240,
        201,
        10,
        64,
        193,
        74
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "mxe_account",
          "writable": true
        },
        {
          "name": "comp_def_account",
          "docs": [
            "Can't check it here as it's not initialized yet."
          ],
          "writable": true
        },
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": []
    },
    {
      "name": "init_vote_for_proposal_comp_def",
      "discriminator": [
        122,
        69,
        213,
        158,
        235,
        68,
        113,
        185
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "mxe_account",
          "writable": true
        },
        {
          "name": "comp_def_account",
          "docs": [
            "Can't check it here as it's not initialized yet."
          ],
          "writable": true
        },
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": []
    },
    {
      "name": "reset_vote_counters",
      "docs": [
        "Resets encrypted vote counters for a new round via MPC.",
        "This must be called after creating round history to prevent votes from previous rounds",
        "from carrying over to the next round.",
        "",
        "# Arguments",
        "* `computation_offset` - Unique offset for this computation",
        "* `nonce` - New cryptographic nonce for resetting encrypted vote counters"
      ],
      "discriminator": [
        104,
        212,
        246,
        1,
        44,
        170,
        4,
        112
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "sign_pda_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  83,
                  105,
                  103,
                  110,
                  101,
                  114,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "mxe_account"
        },
        {
          "name": "mempool_account",
          "writable": true
        },
        {
          "name": "executing_pool",
          "writable": true
        },
        {
          "name": "computation_account",
          "writable": true
        },
        {
          "name": "comp_def_account"
        },
        {
          "name": "cluster_account",
          "writable": true
        },
        {
          "name": "pool_account",
          "writable": true,
          "address": "7MGSS4iKNM4sVib7bDZDJhVqB6EcchPwVnTKenCY1jt3"
        },
        {
          "name": "clock_account",
          "address": "FHriyvoZotYiFnbUzKFjzRSb2NiaC8RPWY7jtKuKhg65"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "system_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  115,
                  121,
                  115,
                  116,
                  101,
                  109
                ]
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "computation_offset",
          "type": "u64"
        },
        {
          "name": "nonce",
          "type": "u128"
        }
      ]
    },
    {
      "name": "reveal_winning_proposal",
      "docs": [
        "Reveals the winning proposal with the most votes.",
        "",
        "Only the system authority can call this function to decrypt and reveal the vote tallies.",
        "The MPC computation finds the proposal with the maximum votes and returns its ID and vote count.",
        "Creates a voting round history account to permanently store the results.",
        "",
        "# Arguments",
        "* `system_id` - The system ID to reveal results for"
      ],
      "discriminator": [
        15,
        162,
        2,
        107,
        92,
        177,
        11,
        231
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "sign_pda_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  83,
                  105,
                  103,
                  110,
                  101,
                  114,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "mxe_account"
        },
        {
          "name": "mempool_account",
          "writable": true
        },
        {
          "name": "executing_pool",
          "writable": true
        },
        {
          "name": "computation_account",
          "writable": true
        },
        {
          "name": "comp_def_account"
        },
        {
          "name": "cluster_account",
          "writable": true
        },
        {
          "name": "pool_account",
          "writable": true,
          "address": "7MGSS4iKNM4sVib7bDZDJhVqB6EcchPwVnTKenCY1jt3"
        },
        {
          "name": "clock_account",
          "address": "FHriyvoZotYiFnbUzKFjzRSb2NiaC8RPWY7jtKuKhg65"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "system_acc",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  115,
                  121,
                  115,
                  116,
                  101,
                  109
                ]
              }
            ]
          }
        },
        {
          "name": "round_metadata",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  111,
                  117,
                  110,
                  100,
                  95,
                  109,
                  101,
                  116,
                  97,
                  100,
                  97,
                  116,
                  97
                ]
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "computation_offset",
          "type": "u64"
        },
        {
          "name": "_system_id",
          "type": "u32"
        }
      ]
    },
    {
      "name": "reveal_winning_proposal_callback",
      "discriminator": [
        78,
        9,
        75,
        7,
        144,
        13,
        69,
        214
      ],
      "accounts": [
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "comp_def_account"
        },
        {
          "name": "instructions_sysvar",
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "system_acc",
          "writable": true
        },
        {
          "name": "round_metadata",
          "writable": true
        }
      ],
      "args": [
        {
          "name": "output",
          "type": {
            "defined": {
              "name": "ComputationOutputs",
              "generics": [
                {
                  "kind": "type",
                  "type": {
                    "defined": {
                      "name": "RevealWinningProposalOutput"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "submit_proposal",
      "docs": [
        "Submits a new proposal to the system.",
        "",
        "This allows anyone to submit a proposal with a title, description, and URL.",
        "The proposal gets assigned a unique ID within the current round and can be voted on by users.",
        "",
        "# Arguments",
        "* `title` - Short title of the proposal (max 50 chars)",
        "* `description` - Detailed description of the proposal (max 200 chars)",
        "* `url` - URL associated with the proposal (max 200 chars)"
      ],
      "discriminator": [
        224,
        38,
        210,
        52,
        167,
        150,
        221,
        150
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "system_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  115,
                  121,
                  115,
                  116,
                  101,
                  109
                ]
              }
            ]
          }
        },
        {
          "name": "round_metadata",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  111,
                  117,
                  110,
                  100,
                  95,
                  109,
                  101,
                  116,
                  97,
                  100,
                  97,
                  116,
                  97
                ]
              }
            ]
          }
        },
        {
          "name": "proposal_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "system_acc"
              },
              {
                "kind": "account",
                "path": "round_metadata.current_round",
                "account": "RoundMetadataAccount"
              },
              {
                "kind": "account",
                "path": "round_metadata.proposals_in_current_round",
                "account": "RoundMetadataAccount"
              }
            ]
          }
        },
        {
          "name": "round_escrow",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  111,
                  117,
                  110,
                  100,
                  95,
                  101,
                  115,
                  99,
                  114,
                  111,
                  119
                ]
              },
              {
                "kind": "account",
                "path": "round_metadata.current_round",
                "account": "RoundMetadataAccount"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "title",
          "type": "string"
        },
        {
          "name": "description",
          "type": "string"
        },
        {
          "name": "url",
          "type": "string"
        }
      ]
    },
    {
      "name": "verify_winning_vote",
      "docs": [
        "Decrypts an encrypted vote and verifies if it was for the winning proposal in a given round.",
        "",
        "This function allows verification of whether a specific vote was cast for the winning proposal",
        "in a particular voting round. It decrypts the vote and compares it against the winning proposal",
        "stored in the round history. Requires a valid vote receipt to prevent fake vote verification.",
        "",
        "# Arguments",
        "* `vote` - The encrypted vote containing the proposal ID",
        "* `vote_encryption_pubkey` - The public key used to encrypt the vote",
        "* `vote_nonce` - The nonce used for vote encryption",
        "* `round_id` - The round ID to check against"
      ],
      "discriminator": [
        169,
        157,
        218,
        214,
        246,
        109,
        110,
        247
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "sign_pda_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  83,
                  105,
                  103,
                  110,
                  101,
                  114,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "mxe_account"
        },
        {
          "name": "mempool_account",
          "writable": true
        },
        {
          "name": "executing_pool",
          "writable": true
        },
        {
          "name": "computation_account",
          "writable": true
        },
        {
          "name": "comp_def_account"
        },
        {
          "name": "cluster_account",
          "writable": true
        },
        {
          "name": "pool_account",
          "writable": true,
          "address": "7MGSS4iKNM4sVib7bDZDJhVqB6EcchPwVnTKenCY1jt3"
        },
        {
          "name": "clock_account",
          "address": "FHriyvoZotYiFnbUzKFjzRSb2NiaC8RPWY7jtKuKhg65"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "system_acc",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  115,
                  121,
                  115,
                  116,
                  101,
                  109
                ]
              }
            ]
          }
        },
        {
          "name": "round_metadata",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  111,
                  117,
                  110,
                  100,
                  95,
                  109,
                  101,
                  116,
                  97,
                  100,
                  97,
                  116,
                  97
                ]
              }
            ]
          }
        },
        {
          "name": "round_history"
        },
        {
          "name": "vote_receipt"
        },
        {
          "name": "round_escrow",
          "writable": true
        }
      ],
      "args": [
        {
          "name": "computation_offset",
          "type": "u64"
        },
        {
          "name": "vote",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "vote_encryption_pubkey",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "vote_nonce",
          "type": "u128"
        },
        {
          "name": "round_id",
          "type": "u64"
        }
      ]
    },
    {
      "name": "verify_winning_vote_callback",
      "discriminator": [
        190,
        26,
        148,
        24,
        32,
        191,
        245,
        38
      ],
      "accounts": [
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "comp_def_account"
        },
        {
          "name": "instructions_sysvar",
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "system_acc",
          "writable": true
        },
        {
          "name": "vote_receipt",
          "writable": true
        }
      ],
      "args": [
        {
          "name": "output",
          "type": {
            "defined": {
              "name": "ComputationOutputs",
              "generics": [
                {
                  "kind": "type",
                  "type": {
                    "defined": {
                      "name": "VerifyWinningVoteOutput"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "vote_for_proposal",
      "docs": [
        "Submits an encrypted vote for a specific proposal.",
        "",
        "This function allows a voter to cast their vote for a specific proposal in encrypted form.",
        "The vote is added to the running tally through MPC computation, ensuring",
        "that individual votes remain confidential while updating the overall count.",
        "A receipt account is created for the voter storing their vote details with encrypted proposal ID.",
        "Note: The proposal_id_nonce is kept client-side only for privacy.",
        "",
        "# Arguments",
        "* `proposal_id` - ID of the proposal being voted for (plaintext for validation)",
        "* `encrypted_proposal_id` - Encrypted proposal ID for ballot secrecy (nonce kept client-side)",
        "* `vote` - Encrypted vote containing the proposal ID",
        "* `vote_encryption_pubkey` - Voter's public key for encryption",
        "* `vote_nonce` - Cryptographic nonce for the vote encryption"
      ],
      "discriminator": [
        75,
        202,
        51,
        159,
        114,
        137,
        154,
        219
      ],
      "accounts": [
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "sign_pda_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  83,
                  105,
                  103,
                  110,
                  101,
                  114,
                  65,
                  99,
                  99,
                  111,
                  117,
                  110,
                  116
                ]
              }
            ]
          }
        },
        {
          "name": "mxe_account"
        },
        {
          "name": "mempool_account",
          "writable": true
        },
        {
          "name": "executing_pool",
          "writable": true
        },
        {
          "name": "computation_account",
          "writable": true
        },
        {
          "name": "comp_def_account"
        },
        {
          "name": "cluster_account",
          "writable": true
        },
        {
          "name": "pool_account",
          "writable": true,
          "address": "7MGSS4iKNM4sVib7bDZDJhVqB6EcchPwVnTKenCY1jt3"
        },
        {
          "name": "clock_account",
          "address": "FHriyvoZotYiFnbUzKFjzRSb2NiaC8RPWY7jtKuKhg65"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "system_acc",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108,
                  95,
                  115,
                  121,
                  115,
                  116,
                  101,
                  109
                ]
              }
            ]
          }
        },
        {
          "name": "vote_receipt",
          "writable": true
        },
        {
          "name": "round_metadata",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  114,
                  111,
                  117,
                  110,
                  100,
                  95,
                  109,
                  101,
                  116,
                  97,
                  100,
                  97,
                  116,
                  97
                ]
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "computation_offset",
          "type": "u64"
        },
        {
          "name": "proposal_id",
          "type": "u8"
        },
        {
          "name": "encrypted_proposal_id",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "vote",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "vote_encryption_pubkey",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "vote_nonce",
          "type": "u128"
        },
        {
          "name": "round_id",
          "type": "u64"
        }
      ]
    },
    {
      "name": "vote_for_proposal_callback",
      "discriminator": [
        117,
        246,
        37,
        208,
        65,
        13,
        65,
        117
      ],
      "accounts": [
        {
          "name": "arcium_program",
          "address": "BKck65TgoKRokMjQM3datB9oRwJ8rAj2jxPXvHXUvcL6"
        },
        {
          "name": "comp_def_account"
        },
        {
          "name": "instructions_sysvar",
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "system_acc",
          "writable": true
        }
      ],
      "args": [
        {
          "name": "output",
          "type": {
            "defined": {
              "name": "ComputationOutputs",
              "generics": [
                {
                  "kind": "type",
                  "type": {
                    "defined": {
                      "name": "VoteForProposalOutput"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "ClockAccount",
      "discriminator": [
        152,
        171,
        158,
        195,
        75,
        61,
        51,
        8
      ]
    },
    {
      "name": "Cluster",
      "discriminator": [
        236,
        225,
        118,
        228,
        173,
        106,
        18,
        60
      ]
    },
    {
      "name": "ComputationDefinitionAccount",
      "discriminator": [
        245,
        176,
        217,
        221,
        253,
        104,
        172,
        200
      ]
    },
    {
      "name": "FeePool",
      "discriminator": [
        172,
        38,
        77,
        146,
        148,
        5,
        51,
        242
      ]
    },
    {
      "name": "MXEAccount",
      "discriminator": [
        103,
        26,
        85,
        250,
        179,
        159,
        17,
        117
      ]
    },
    {
      "name": "ProposalAccount",
      "discriminator": [
        164,
        190,
        4,
        248,
        203,
        124,
        243,
        64
      ]
    },
    {
      "name": "ProposalSystemAccount",
      "discriminator": [
        77,
        42,
        10,
        135,
        59,
        151,
        177,
        95
      ]
    },
    {
      "name": "RoundEscrowAccount",
      "discriminator": [
        180,
        130,
        244,
        178,
        190,
        92,
        21,
        52
      ]
    },
    {
      "name": "RoundMetadataAccount",
      "discriminator": [
        255,
        203,
        29,
        52,
        131,
        252,
        229,
        103
      ]
    },
    {
      "name": "SignerAccount",
      "discriminator": [
        127,
        212,
        7,
        180,
        17,
        50,
        249,
        193
      ]
    },
    {
      "name": "VotingRoundHistoryAccount",
      "discriminator": [
        94,
        48,
        73,
        112,
        144,
        123,
        244,
        115
      ]
    }
  ],
  "events": [
    {
      "name": "ProposalSubmittedEvent",
      "discriminator": [
        210,
        156,
        179,
        54,
        84,
        52,
        115,
        4
      ]
    },
    {
      "name": "VoteDecryptedEvent",
      "discriminator": [
        36,
        127,
        243,
        62,
        211,
        77,
        5,
        20
      ]
    },
    {
      "name": "VoteEvent",
      "discriminator": [
        195,
        71,
        250,
        105,
        120,
        119,
        234,
        134
      ]
    },
    {
      "name": "VoteReceiptCreatedEvent",
      "discriminator": [
        163,
        229,
        251,
        231,
        254,
        148,
        118,
        39
      ]
    },
    {
      "name": "VoteVerificationEvent",
      "discriminator": [
        247,
        208,
        70,
        115,
        79,
        149,
        119,
        40
      ]
    },
    {
      "name": "VoterRewardEvent",
      "discriminator": [
        119,
        127,
        168,
        37,
        128,
        14,
        190,
        126
      ]
    },
    {
      "name": "WinningProposalEvent",
      "discriminator": [
        34,
        12,
        17,
        248,
        254,
        78,
        1,
        142
      ]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "InvalidAuthority",
      "msg": "Invalid authority"
    },
    {
      "code": 6001,
      "name": "AbortedComputation",
      "msg": "The computation was aborted"
    },
    {
      "code": 6002,
      "name": "ClusterNotSet",
      "msg": "Cluster not set"
    },
    {
      "code": 6003,
      "name": "MaxProposalsReached",
      "msg": "Maximum number of proposals reached"
    },
    {
      "code": 6004,
      "name": "InvalidProposalId",
      "msg": "Invalid proposal ID"
    },
    {
      "code": 6005,
      "name": "AlreadyVoted",
      "msg": "Voter has already voted - only one vote per voter allowed"
    },
    {
      "code": 6006,
      "name": "AccountAlreadyInitialized",
      "msg": "Account is already initialized"
    },
    {
      "code": 6007,
      "name": "InvalidRoundId",
      "msg": "Invalid round ID - can only vote in current active round"
    },
    {
      "code": 6008,
      "name": "NoWinnerRevealed",
      "msg": "No winner has been revealed yet"
    },
    {
      "code": 6009,
      "name": "InvalidVoteReceipt",
      "msg": "Invalid vote receipt - must provide actual vote receipt account"
    },
    {
      "code": 6010,
      "name": "VoteMismatch",
      "msg": "Vote does not match stored vote in receipt"
    },
    {
      "code": 6011,
      "name": "InsufficientFunds",
      "msg": "Insufficient funds for proposal submission fee"
    },
    {
      "code": 6012,
      "name": "RoundEscrowNotActive",
      "msg": "Round escrow is not in active status"
    },
    {
      "code": 6013,
      "name": "InvalidEscrowRoundId",
      "msg": "Invalid escrow round ID"
    },
    {
      "code": 6014,
      "name": "NoRewardAvailable",
      "msg": "No reward available to claim"
    },
    {
      "code": 6015,
      "name": "InvalidAccountSize",
      "msg": "Invalid account size"
    },
    {
      "code": 6016,
      "name": "NoProposalsInRound",
      "msg": "No proposals in current round"
    }
  ],
  "types": [
    {
      "name": "Activation",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "activation_epoch",
            "type": {
              "defined": {
                "name": "Epoch"
              }
            }
          },
          {
            "name": "deactivation_epoch",
            "type": {
              "defined": {
                "name": "Epoch"
              }
            }
          }
        ]
      }
    },
    {
      "name": "CircuitSource",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Local",
            "fields": [
              {
                "defined": {
                  "name": "LocalCircuitSource"
                }
              }
            ]
          },
          {
            "name": "OnChain",
            "fields": [
              {
                "defined": {
                  "name": "OnChainCircuitSource"
                }
              }
            ]
          },
          {
            "name": "OffChain",
            "fields": [
              {
                "defined": {
                  "name": "OffChainCircuitSource"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "name": "ClockAccount",
      "docs": [
        "An account storing the current network epoch"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "start_epoch",
            "type": {
              "defined": {
                "name": "Epoch"
              }
            }
          },
          {
            "name": "current_epoch",
            "type": {
              "defined": {
                "name": "Epoch"
              }
            }
          },
          {
            "name": "start_epoch_timestamp",
            "type": {
              "defined": {
                "name": "Timestamp"
              }
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "Cluster",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "max_size",
            "type": "u32"
          },
          {
            "name": "activation",
            "type": {
              "defined": {
                "name": "Activation"
              }
            }
          },
          {
            "name": "max_capacity",
            "type": "u64"
          },
          {
            "name": "cu_price",
            "type": "u64"
          },
          {
            "name": "cu_price_proposals",
            "type": {
              "array": [
                "u64",
                32
              ]
            }
          },
          {
            "name": "last_updated_epoch",
            "type": {
              "defined": {
                "name": "Epoch"
              }
            }
          },
          {
            "name": "mxes",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "nodes",
            "type": {
              "vec": {
                "defined": {
                  "name": "NodeRef"
                }
              }
            }
          },
          {
            "name": "pending_nodes",
            "type": {
              "vec": {
                "defined": {
                  "name": "NodeRef"
                }
              }
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ComputationDefinitionAccount",
      "docs": [
        "An account representing a [ComputationDefinition] in a MXE."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "finalization_authority",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "finalize_during_callback",
            "type": "bool"
          },
          {
            "name": "cu_amount",
            "type": "u64"
          },
          {
            "name": "definition",
            "type": {
              "defined": {
                "name": "ComputationDefinitionMeta"
              }
            }
          },
          {
            "name": "circuit_source",
            "type": {
              "defined": {
                "name": "CircuitSource"
              }
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ComputationDefinitionMeta",
      "docs": [
        "A computation definition for execution in a MXE."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "circuit_len",
            "type": "u32"
          },
          {
            "name": "signature",
            "type": {
              "defined": {
                "name": "ComputationSignature"
              }
            }
          }
        ]
      }
    },
    {
      "name": "ComputationOutputs",
      "generics": [
        {
          "kind": "type",
          "name": "O"
        }
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Success",
            "fields": [
              {
                "generic": "O"
              }
            ]
          },
          {
            "name": "Failure"
          }
        ]
      }
    },
    {
      "name": "ComputationSignature",
      "docs": [
        "The signature of a computation defined in a [ComputationDefinition]."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "parameters",
            "type": {
              "vec": {
                "defined": {
                  "name": "Parameter"
                }
              }
            }
          },
          {
            "name": "outputs",
            "type": {
              "vec": {
                "defined": {
                  "name": "Output"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "DecryptVoteOutput",
      "docs": [
        "The output of the callback instruction. Provided as a struct with ordered fields",
        "as anchor does not support tuples and tuple structs yet."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "field_0",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "Epoch",
      "docs": [
        "The network epoch"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          "u64"
        ]
      }
    },
    {
      "name": "FeePool",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "InitProposalVotesOutput",
      "docs": [
        "The output of the callback instruction. Provided as a struct with ordered fields",
        "as anchor does not support tuples and tuple structs yet."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "field_0",
            "type": {
              "defined": {
                "name": "MXEEncryptedStruct",
                "generics": [
                  {
                    "kind": "const",
                    "value": "10"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "name": "LocalCircuitSource",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "MxeKeygen"
          }
        ]
      }
    },
    {
      "name": "MXEAccount",
      "docs": [
        "A MPC Execution Environment."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "type": {
              "option": "pubkey"
            }
          },
          {
            "name": "cluster",
            "type": {
              "option": "u32"
            }
          },
          {
            "name": "x25519_pubkey",
            "type": {
              "defined": {
                "name": "X25519Pubkey"
              }
            }
          },
          {
            "name": "fallback_clusters",
            "type": {
              "vec": "u32"
            }
          },
          {
            "name": "rejected_clusters",
            "type": {
              "vec": "u32"
            }
          },
          {
            "name": "computation_definitions",
            "type": {
              "vec": "u32"
            }
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "MXEEncryptedStruct",
      "generics": [
        {
          "kind": "const",
          "name": "LEN",
          "type": "usize"
        }
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "nonce",
            "type": "u128"
          },
          {
            "name": "ciphertexts",
            "type": {
              "array": [
                {
                  "array": [
                    "u8",
                    32
                  ]
                },
                {
                  "generic": "LEN"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "NodeRef",
      "docs": [
        "A reference to a node in the cluster.",
        "The offset is to derive the Node Account.",
        "The current_total_rewards is the total rewards the node has received so far in the current",
        "epoch."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "offset",
            "type": "u32"
          },
          {
            "name": "current_total_rewards",
            "type": "u64"
          },
          {
            "name": "vote",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "OffChainCircuitSource",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "source",
            "type": "string"
          },
          {
            "name": "hash",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "OnChainCircuitSource",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "is_completed",
            "type": "bool"
          },
          {
            "name": "upload_auth",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "Output",
      "docs": [
        "An output of a computation.",
        "We currently don't support encrypted outputs yet since encrypted values are passed via",
        "data objects."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "PlaintextBool"
          },
          {
            "name": "PlaintextU8"
          },
          {
            "name": "PlaintextU16"
          },
          {
            "name": "PlaintextU32"
          },
          {
            "name": "PlaintextU64"
          },
          {
            "name": "PlaintextU128"
          },
          {
            "name": "Ciphertext"
          },
          {
            "name": "ArcisPubkey"
          },
          {
            "name": "PlaintextFloat"
          }
        ]
      }
    },
    {
      "name": "Parameter",
      "docs": [
        "A parameter of a computation.",
        "We differentiate between plaintext and encrypted parameters and data objects.",
        "Plaintext parameters are directly provided as their value.",
        "Encrypted parameters are provided as an offchain reference to the data.",
        "Data objects are provided as a reference to the data object account."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "PlaintextBool"
          },
          {
            "name": "PlaintextU8"
          },
          {
            "name": "PlaintextU16"
          },
          {
            "name": "PlaintextU32"
          },
          {
            "name": "PlaintextU64"
          },
          {
            "name": "PlaintextU128"
          },
          {
            "name": "Ciphertext"
          },
          {
            "name": "ArcisPubkey"
          },
          {
            "name": "ArcisSignature"
          },
          {
            "name": "PlaintextFloat"
          },
          {
            "name": "ManticoreAlgo"
          },
          {
            "name": "InputDataset"
          }
        ]
      }
    },
    {
      "name": "ProposalAccount",
      "docs": [
        "Represents a single proposal submitted to the system."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "docs": [
              "PDA bump seed"
            ],
            "type": "u8"
          },
          {
            "name": "id",
            "docs": [
              "Unique identifier for this proposal within the round"
            ],
            "type": "u8"
          },
          {
            "name": "round_id",
            "docs": [
              "Round ID this proposal belongs to"
            ],
            "type": "u64"
          },
          {
            "name": "submitter",
            "docs": [
              "Public key of the proposal submitter"
            ],
            "type": "pubkey"
          },
          {
            "name": "vote_count",
            "docs": [
              "Number of votes this proposal has received (public count)"
            ],
            "type": "u64"
          },
          {
            "name": "title",
            "docs": [
              "Short title of the proposal (max 50 characters)"
            ],
            "type": "string"
          },
          {
            "name": "description",
            "docs": [
              "Detailed description of the proposal"
            ],
            "type": "string"
          },
          {
            "name": "url",
            "docs": [
              "URL associated with the proposal"
            ],
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "ProposalSubmittedEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proposal_id",
            "type": "u8"
          },
          {
            "name": "round_id",
            "type": "u64"
          },
          {
            "name": "submitter",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "ProposalSystemAccount",
      "docs": [
        "Represents the proposal voting system with encrypted vote tallies for all proposals.",
        "NOTE: This account is passed to MXE - DO NOT modify its structure!"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "docs": [
              "PDA bump seed"
            ],
            "type": "u8"
          },
          {
            "name": "authority",
            "docs": [
              "Public key of the system authority (only they can reveal results)"
            ],
            "type": "pubkey"
          },
          {
            "name": "nonce",
            "docs": [
              "Cryptographic nonce for the encrypted vote counters"
            ],
            "type": "u128"
          },
          {
            "name": "next_proposal_id",
            "docs": [
              "Next proposal ID to be assigned"
            ],
            "type": "u8"
          },
          {
            "name": "proposal_votes",
            "docs": [
              "Encrypted vote counters for all proposals (up to 10) as 32-byte ciphertexts"
            ],
            "type": {
              "array": [
                {
                  "array": [
                    "u8",
                    32
                  ]
                },
                10
              ]
            }
          },
          {
            "name": "winning_proposal_id",
            "docs": [
              "Winning proposal ID after reveal (None = not revealed yet)"
            ],
            "type": {
              "option": "u8"
            }
          },
          {
            "name": "winning_vote_count",
            "docs": [
              "Number of votes the winning proposal received (None = not revealed yet)"
            ],
            "type": {
              "option": "u64"
            }
          },
          {
            "name": "proposal_submission_fee",
            "docs": [
              "Fixed fee for proposal submission (in lamports)"
            ],
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "RevealWinningProposalOutput",
      "docs": [
        "The output of the callback instruction. Provided as a struct with ordered fields",
        "as anchor does not support tuples and tuple structs yet."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "field_0",
            "type": {
              "defined": {
                "name": "RevealWinningProposalOutputStruct0"
              }
            }
          }
        ]
      }
    },
    {
      "name": "RevealWinningProposalOutputStruct0",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "field_0",
            "type": "u8"
          },
          {
            "name": "field_1",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "RoundEscrowAccount",
      "docs": [
        "Represents the escrow account for a specific voting round."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "docs": [
              "PDA bump seed"
            ],
            "type": "u8"
          },
          {
            "name": "round_id",
            "docs": [
              "Round ID this escrow belongs to"
            ],
            "type": "u64"
          },
          {
            "name": "total_collected",
            "docs": [
              "Total fees collected in this round"
            ],
            "type": "u64"
          },
          {
            "name": "total_distributed",
            "docs": [
              "Total distributed from this round"
            ],
            "type": "u64"
          },
          {
            "name": "current_balance",
            "docs": [
              "Current available balance"
            ],
            "type": "u64"
          },
          {
            "name": "round_status",
            "docs": [
              "Status of this round's escrow"
            ],
            "type": {
              "defined": {
                "name": "RoundStatus"
              }
            }
          },
          {
            "name": "created_at",
            "docs": [
              "Timestamp when this round escrow was created"
            ],
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "RoundMetadataAccount",
      "docs": [
        "Metadata account for tracking round information.",
        "This is separate from ProposalSystemAccount to avoid modifying accounts passed to MXE."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "docs": [
              "PDA bump seed"
            ],
            "type": "u8"
          },
          {
            "name": "current_round",
            "docs": [
              "Current voting round number (incremented each time a winner is revealed)"
            ],
            "type": "u64"
          },
          {
            "name": "proposals_in_current_round",
            "docs": [
              "Number of proposals submitted in the current round"
            ],
            "type": "u8"
          },
          {
            "name": "total_voters",
            "docs": [
              "Total number of voters in the current round"
            ],
            "type": "u64"
          },
          {
            "name": "round_started",
            "docs": [
              "Unix timestamp when the current round started"
            ],
            "type": "i64"
          },
          {
            "name": "theme",
            "docs": [
              "Theme for the current round (fixed size array to avoid stack issues)"
            ],
            "type": {
              "array": [
                "u8",
                20
              ]
            }
          }
        ]
      }
    },
    {
      "name": "RoundStatus",
      "docs": [
        "Status of a round's escrow account."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Active"
          },
          {
            "name": "Completed"
          },
          {
            "name": "Closed"
          }
        ]
      }
    },
    {
      "name": "SignerAccount",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "Timestamp",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "timestamp",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "VerifyWinningVoteOutput",
      "docs": [
        "The output of the callback instruction. Provided as a struct with ordered fields",
        "as anchor does not support tuples and tuple structs yet."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "field_0",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "VoteDecryptedEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "decrypted_proposal_id",
            "type": "u8"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "VoteEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "timestamp",
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "VoteForProposalOutput",
      "docs": [
        "The output of the callback instruction. Provided as a struct with ordered fields",
        "as anchor does not support tuples and tuple structs yet."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "field_0",
            "type": {
              "defined": {
                "name": "MXEEncryptedStruct",
                "generics": [
                  {
                    "kind": "const",
                    "value": "10"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    {
      "name": "VoteReceiptCreatedEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "voter",
            "type": "pubkey"
          },
          {
            "name": "proposal_id",
            "type": "u8"
          },
          {
            "name": "encrypted_proposal_id",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "VoteVerificationEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "is_winning_vote",
            "type": "bool"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "VoterRewardEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "voter",
            "type": "pubkey"
          },
          {
            "name": "reward_amount",
            "type": "u64"
          },
          {
            "name": "total_voters",
            "type": "u64"
          },
          {
            "name": "round_id",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "VotingRoundHistoryAccount",
      "docs": [
        "Represents the history of a completed voting round.",
        "This account is created after a winner is revealed and stores the results permanently."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "docs": [
              "PDA bump seed"
            ],
            "type": "u8"
          },
          {
            "name": "round_id",
            "docs": [
              "Round identifier (incremented for each voting round)"
            ],
            "type": "u64"
          },
          {
            "name": "winning_proposal_id",
            "docs": [
              "ID of the winning proposal"
            ],
            "type": "u8"
          },
          {
            "name": "revealed_at",
            "docs": [
              "Timestamp when the winner was revealed"
            ],
            "type": "i64"
          },
          {
            "name": "revealed_by",
            "docs": [
              "Authority who revealed the results"
            ],
            "type": "pubkey"
          },
          {
            "name": "total_proposals",
            "docs": [
              "Total number of proposals in this round"
            ],
            "type": "u8"
          },
          {
            "name": "winning_vote_count",
            "docs": [
              "Number of votes the winning proposal received"
            ],
            "type": "u64"
          },
          {
            "name": "theme",
            "docs": [
              "Theme used for this round (fixed size array to avoid stack issues)"
            ],
            "type": {
              "array": [
                "u8",
                20
              ]
            }
          },
          {
            "name": "total_voters",
            "docs": [
              "Total number of voters in this round (preserved for reward calculations)"
            ],
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "WinningProposalEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "winning_proposal_id",
            "type": "u8"
          },
          {
            "name": "winning_vote_count",
            "type": "u64"
          },
          {
            "name": "round_id",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "X25519Pubkey",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Set",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              }
            ]
          },
          {
            "name": "Unset",
            "fields": [
              {
                "array": [
                  "u8",
                  32
                ]
              },
              {
                "vec": "bool"
              }
            ]
          }
        ]
      }
    }
  ]
}